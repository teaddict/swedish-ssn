{"version":3,"file":"swedish-ssn.js","sources":["../src/swedish-ssn.js"],"sourcesContent":["\"use strict\"\n/**\n * Project: swedish-ssn\n * Purpose: Validate and generate Swedish SSN's according to https://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\n * Author:  teaddict\n * Version: 1.0.3\n */\n\nexport default class SwedishSSN {\n  /**\n   * Validates parameter given SSN. Returns true if SSN is valid, otherwise false.\n   * @param {string} ssn - SSN to validate\n   * @returns {boolean}\n   */\n  static validate(ssn) {\n    if (ssn === undefined || ssn === null || ssn === '') {\n      return false;\n    }\n\n    const ssnAsArray = parse(ssn);\n    if (ssnAsArray.length !== 10) {\n      return false;\n    }\n\n    const checkDigit = ssnAsArray.pop();\n    return getChecksum(ssnAsArray) === checkDigit;\n  }\n\n  /**\n   * Creates a valid SSN using random numbers.\n   * @returns {string} - valid ssn\n   */\n  static generateRandomSSN() {\n    const birthdate = getRandomDate();\n    const secondPart = getRandomNumber(1000, 9998, 'random');\n    const randomSsn = yymmdd(birthdate) + secondPart;\n    const ssnAsArray = parse(randomSsn);\n    const checksum = getChecksum(ssnAsArray);\n    ssnAsArray.push(checksum);\n    return ssnFormatter(ssnAsArray);\n  }\n\n  /**\n   * Creates a valid SSN using given date and gender.\n   * @param {Date} birthdate - Birth date\n   * @param {string} [gender] - 'male' or 'female'\n   * @returns {string} - valid ssn\n   */\n  static generateSSNWithParameters(birthdate, gender) {\n    if (!(birthdate instanceof Date) || isNaN(birthdate)) {\n      throw new Error('Invalid birthdate provided');\n    }\n\n    const secondPart = getRandomNumber(1000, 9999, gender);\n    const randomSsn = yymmdd(birthdate) + secondPart;\n    const ssnAsArray = parse(randomSsn);\n    const checksum = getChecksum(ssnAsArray);\n    ssnAsArray.push(checksum);\n    return ssnFormatter(ssnAsArray);\n  }\n}\n\nconst genderEnum = Object.freeze({\n  MALE: 'male',\n  FEMALE: 'female'\n});\n\nfunction yymmdd(birthdate) {\n  try {\n    return birthdate.toLocaleDateString(\"sv-SE\", {\n      year: \"2-digit\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replace(/\\D/g, \"\");\n  } catch (error) {\n    throw new Error('Invalid date format');\n  }\n}\n\n/**\n * Returns a random number as string for second part of ssn\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @param {string} [gender] - Gender specification\n * @returns {string} - Three digit number as string\n */\nfunction getRandomNumber(min, max, gender) {\n  const number = Math.floor(Math.random() * (max - min + 1) + min);\n  let result = number;\n\n  switch (gender) {\n    case genderEnum.MALE:\n      result = isEven(number) ? number + 1 : number;\n      break;\n    case genderEnum.FEMALE:\n      result = isOdd(number) ? number + 1 : number;\n      break;\n  }\n\n  return result.toString().substring(1);\n}\n\nconst isEven = (x) => (x % 2) === 0;\nconst isOdd = (x) => !isEven(x);\n\nfunction getRandomDate() {\n  const minDate = new Date(1900, 0, 1).getTime();\n  const maxDate = new Date(2099, 11, 31).getTime();\n  return new Date(minDate + Math.random() * (maxDate - minDate));\n}\n\nconst flatMap = (arr, f) => arr.flatMap(f);\n\nfunction getChecksum(ssn) {\n  const luhn = [2, 1, 2, 1, 2, 1, 2, 1, 2];\n  const multiplied = ssn.map((e, i) => e * luhn[i]);\n  const digits = flatMap(multiplied, (n) => \n    n >= 10 ? [sumOfNum(n)] : [n]\n  );\n\n  const sumOfDigits = digits.reduce((acc, curr) => acc + curr, 0);\n  return Math.floor((sumOfDigits * 9) % 10);\n}\n\nfunction sumOfNum(num) {\n  return Math.floor(num % 10) + Math.floor(num / 10);\n}\n\n/**\n * Returns a formatted SSN 'yymmdd-fjkm'\n * @param {number[]} ssnAsArray - Array of SSN digits\n * @returns {string} - Formatted SSN\n */\nfunction ssnFormatter(ssnAsArray) {\n  const firstPart = ssnAsArray.slice(0, 6).join('');\n  const secondPart = ssnAsArray.slice(6, 10).join('');\n  return `${firstPart}-${secondPart}`;\n}\n\n/**\n * Parse parameter given SSN string. Remove all characters except digits.\n * @param {string} ssn - SSN to parse\n * @returns {number[]} - Array of digits\n */\nfunction parse(ssn) {\n  const cleaned = ssn.replace(/\\D/g, \"\").split(\"\").map(Number);\n  return cleaned.length === 12 ? cleaned.slice(2, 12) : cleaned;\n}\n"],"names":["SwedishSSN","validate","ssn","undefined","ssnAsArray","parse","length","checkDigit","pop","getChecksum","generateRandomSSN","birthdate","getRandomDate","secondPart","getRandomNumber","randomSsn","yymmdd","checksum","push","ssnFormatter","generateSSNWithParameters","gender","Date","isNaN","Error","genderEnum","Object","freeze","MALE","FEMALE","toLocaleDateString","year","month","day","replace","error","min","max","number","Math","floor","random","result","isEven","isOdd","toString","substring","x","minDate","getTime","maxDate","flatMap","arr","f","luhn","multiplied","map","e","i","digits","n","sumOfNum","sumOfDigits","reduce","acc","curr","num","firstPart","slice","join","cleaned","split","Number"],"mappings":"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"}