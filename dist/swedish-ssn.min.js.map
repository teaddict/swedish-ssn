{"version":3,"file":"swedish-ssn.min.js","sources":["../src/swedish-ssn.js"],"sourcesContent":["\"use strict\"\n/**\n * Project: swedish-ssn\n * Purpose: Validate and generate Swedish SSN's according to https://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\n * Author:  teaddict\n * Version: 1.0.3\n */\n\nexport default class SwedishSSN {\n  /**\n   * Validates parameter given SSN. Returns true if SSN is valid, otherwise false.\n   * @param {string} ssn - SSN to validate\n   * @returns {boolean}\n   */\n  static validate(ssn) {\n    if (ssn === undefined || ssn === null || ssn === '') {\n      return false;\n    }\n\n    const ssnAsArray = parse(ssn);\n    if (ssnAsArray.length !== 10) {\n      return false;\n    }\n\n    const checkDigit = ssnAsArray.pop();\n    return getChecksum(ssnAsArray) === checkDigit;\n  }\n\n  /**\n   * Creates a valid SSN using random numbers.\n   * @returns {string} - valid ssn\n   */\n  static generateRandomSSN() {\n    const birthdate = getRandomDate();\n    const secondPart = getRandomNumber(1000, 9998, 'random');\n    const randomSsn = yymmdd(birthdate) + secondPart;\n    const ssnAsArray = parse(randomSsn);\n    const checksum = getChecksum(ssnAsArray);\n    ssnAsArray.push(checksum);\n    return ssnFormatter(ssnAsArray);\n  }\n\n  /**\n   * Creates a valid SSN using given date and gender.\n   * @param {Date} birthdate - Birth date\n   * @param {string} [gender] - 'male' or 'female'\n   * @returns {string} - valid ssn\n   */\n  static generateSSNWithParameters(birthdate, gender) {\n    if (!(birthdate instanceof Date) || isNaN(birthdate)) {\n      throw new Error('Invalid birthdate provided');\n    }\n\n    const secondPart = getRandomNumber(1000, 9999, gender);\n    const randomSsn = yymmdd(birthdate) + secondPart;\n    const ssnAsArray = parse(randomSsn);\n    const checksum = getChecksum(ssnAsArray);\n    ssnAsArray.push(checksum);\n    return ssnFormatter(ssnAsArray);\n  }\n}\n\nconst genderEnum = Object.freeze({\n  MALE: 'male',\n  FEMALE: 'female'\n});\n\nfunction yymmdd(birthdate) {\n  try {\n    return birthdate.toLocaleDateString(\"sv-SE\", {\n      year: \"2-digit\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replace(/\\D/g, \"\");\n  } catch (error) {\n    throw new Error('Invalid date format');\n  }\n}\n\n/**\n * Returns a random number as string for second part of ssn\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @param {string} [gender] - Gender specification\n * @returns {string} - Three digit number as string\n */\nfunction getRandomNumber(min, max, gender) {\n  const number = Math.floor(Math.random() * (max - min + 1) + min);\n  let result = number;\n\n  switch (gender) {\n    case genderEnum.MALE:\n      result = isEven(number) ? number + 1 : number;\n      break;\n    case genderEnum.FEMALE:\n      result = isOdd(number) ? number + 1 : number;\n      break;\n  }\n\n  return result.toString().substring(1);\n}\n\nconst isEven = (x) => (x % 2) === 0;\nconst isOdd = (x) => !isEven(x);\n\nfunction getRandomDate() {\n  const minDate = new Date(1900, 0, 1).getTime();\n  const maxDate = new Date(2099, 11, 31).getTime();\n  return new Date(minDate + Math.random() * (maxDate - minDate));\n}\n\nconst flatMap = (arr, f) => arr.flatMap(f);\n\nfunction getChecksum(ssn) {\n  const luhn = [2, 1, 2, 1, 2, 1, 2, 1, 2];\n  const multiplied = ssn.map((e, i) => e * luhn[i]);\n  const digits = flatMap(multiplied, (n) => \n    n >= 10 ? [sumOfNum(n)] : [n]\n  );\n\n  const sumOfDigits = digits.reduce((acc, curr) => acc + curr, 0);\n  return Math.floor((sumOfDigits * 9) % 10);\n}\n\nfunction sumOfNum(num) {\n  return Math.floor(num % 10) + Math.floor(num / 10);\n}\n\n/**\n * Returns a formatted SSN 'yymmdd-fjkm'\n * @param {number[]} ssnAsArray - Array of SSN digits\n * @returns {string} - Formatted SSN\n */\nfunction ssnFormatter(ssnAsArray) {\n  const firstPart = ssnAsArray.slice(0, 6).join('');\n  const secondPart = ssnAsArray.slice(6, 10).join('');\n  return `${firstPart}-${secondPart}`;\n}\n\n/**\n * Parse parameter given SSN string. Remove all characters except digits.\n * @param {string} ssn - SSN to parse\n * @returns {number[]} - Array of digits\n */\nfunction parse(ssn) {\n  const cleaned = ssn.replace(/\\D/g, \"\").split(\"\").map(Number);\n  return cleaned.length === 12 ? cleaned.slice(2, 12) : cleaned;\n}\n"],"names":["genderEnum","Object","freeze","MALE","FEMALE","yymmdd","birthdate","toLocaleDateString","year","month","day","replace","error","Error","getRandomNumber","min","max","gender","number","Math","floor","random","result","isEven","isOdd","toString","substring","x","flatMap","arr","f","getChecksum","ssn","luhn","multiplied","map","e","i","sumOfDigits","n","num","reduce","acc","curr","ssnFormatter","ssnAsArray","slice","join","parse","cleaned","split","Number","length","validate","checkDigit","pop","generateRandomSSN","minDate","Date","getTime","maxDate","getRandomDate","secondPart","checksum","push","generateSSNWithParameters","isNaN"],"mappings":"2OA8DA,MAAMA,EAAaC,OAAOC,OAAO,CAC/BC,KAAM,OACNC,OAAQ,WAGV,SAASC,EAAOC,GACd,IACE,OAAOA,EAAUC,mBAAmB,QAAS,CAC3CC,KAAM,UACNC,MAAO,UACPC,IAAK,YACJC,QAAQ,MAAO,GACnB,CAAC,MAAOC,GACP,MAAM,IAAIC,MAAM,sBAClB,CACF,CASA,SAASC,EAAgBC,EAAKC,EAAKC,GACjC,MAAMC,EAASC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,GAC5D,IAAIO,EAASJ,EAEb,OAAQD,GACN,KAAKjB,EAAWG,KACdmB,EAASC,EAAOL,GAAUA,EAAS,EAAIA,EACvC,MACF,KAAKlB,EAAWI,OACdkB,EAASE,EAAMN,GAAUA,EAAS,EAAIA,EAI1C,OAAOI,EAAOG,WAAWC,UAAU,EACrC,CAEA,MAAMH,EAAUI,GAAOA,EAAI,GAAO,EAC5BH,EAASG,IAAOJ,EAAOI,GAQ7B,MAAMC,EAAUA,CAACC,EAAKC,IAAMD,EAAID,QAAQE,GAExC,SAASC,EAAYC,GACnB,MAAMC,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCC,EAAaF,EAAIG,KAAI,CAACC,EAAGC,IAAMD,EAAIH,EAAKI,KAKxCC,EAJSV,EAAQM,GAAaK,IAClCA,UAAK,GAAK,EAOIC,EAPMD,EAQfpB,KAAKC,MAAMoB,EAAM,IAAMrB,KAAKC,MAAMoB,EAAM,MARnB,CAACD,GAO/B,IAAkBC,CANhB,IAE2BC,QAAO,CAACC,EAAKC,IAASD,EAAMC,GAAM,GAC7D,OAAOxB,KAAKC,MAAqB,EAAdkB,EAAmB,GACxC,CAWA,SAASM,EAAaC,GAGpB,MAAO,GAFWA,EAAWC,MAAM,EAAG,GAAGC,KAAK,OAC3BF,EAAWC,MAAM,EAAG,IAAIC,KAAK,KAElD,CAOA,SAASC,EAAMhB,GACb,MAAMiB,EAAUjB,EAAIrB,QAAQ,MAAO,IAAIuC,MAAM,IAAIf,IAAIgB,QACrD,OAA0B,KAAnBF,EAAQG,OAAgBH,EAAQH,MAAM,EAAG,IAAMG,CACxD,QA3Ie,MAMb,eAAOI,CAASrB,GACd,GAAIA,SAA6C,KAARA,EACvC,OAAO,EAGT,MAAMa,EAAaG,EAAMhB,GACzB,GAA0B,KAAtBa,EAAWO,OACb,OAAO,EAGT,MAAME,EAAaT,EAAWU,MAC9B,OAAOxB,EAAYc,KAAgBS,CACrC,CAMA,wBAAOE,GACL,MAAMlD,EAwEV,WACE,MAAMmD,EAAU,IAAIC,KAAK,KAAM,EAAG,GAAGC,UAC/BC,EAAU,IAAIF,KAAK,KAAM,GAAI,IAAIC,UACvC,OAAO,IAAID,KAAKD,EAAUtC,KAAKE,UAAYuC,EAAUH,GACvD,CA5EsBI,GACZC,EAAahD,EAAgB,IAAM,KAAM,UAEzC+B,EAAaG,EADD3C,EAAOC,GAAawD,GAEhCC,EAAWhC,EAAYc,GAE7B,OADAA,EAAWmB,KAAKD,GACTnB,EAAaC,EACtB,CAQA,gCAAOoB,CAA0B3D,EAAWW,GAC1C,KAAMX,aAAqBoD,OAASQ,MAAM5D,GACxC,MAAM,IAAIO,MAAM,8BAGlB,MAAMiD,EAAahD,EAAgB,IAAM,KAAMG,GAEzC4B,EAAaG,EADD3C,EAAOC,GAAawD,GAEhCC,EAAWhC,EAAYc,GAE7B,OADAA,EAAWmB,KAAKD,GACTnB,EAAaC,EACtB"}